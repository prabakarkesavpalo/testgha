# This GitHub Actions workflow defines a reusable pipeline with multiple stages.
# 
# Workflow Name: Reusable Pipeline
# 
# Triggers:
# - workflow_call: This workflow is triggered when called by another workflow.
# 
# Inputs:
# - environment (string, required): The target environment for the workflow.
# - skip_sit (boolean, optional, default: false): Flag to skip SIT stage.
# - prep_message (string, optional, default: "Running preparation"): Message for the preparation stage.
# - build_message (string, optional, default: "Running build"): Message for the build stage.
# - test_message (string, optional, default: "Running tests"): Message for the unit test stage.
# - package_message (string, optional, default: "Running packaging"): Message for the packaging stage.
# - sca_message (string, optional, default: "Running SCA"): Message for the SCA stage.
# - sast_message (string, optional, default: "Running SAST"): Message for the SAST stage.
# - image_message (string, optional, default: "Building image"): Message for the image build stage.
# - uat_message (string, optional, default: "Deploying to UAT"): Message for the UAT deployment stage.
# - prod_message (string, optional, default: "Deploying to Production"): Message for the Production deployment stage.
# 
# Jobs:
# - preparation: Runs the preparation setup.
# - parallel-stages: Runs build, unit-test, packaging, and SCA stages in parallel.
# - sast: Runs the SAST analysis after parallel stages.
# - image-build: Builds the Docker image after SAST analysis.
# - deploy-uat: Deploys to UAT environment after image build.
# - deploy-prod: Deploys to Production environment after UAT deployment.
name: Reusable Pipeline

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      skip_sit:
        required: false
        type: boolean
        default: false
      prep_message:
        required: false
        type: string
        default: "Running preparation"
      build_message:
        required: false
        type: string
        default: "Running build"
      test_message:
        required: false
        type: string
        default: "Running tests"
      package_message:
        required: false
        type: string
        default: "Running packaging"
      sca_message:
        required: false
        type: string
        default: "Running SCA"
      sast_message:
        required: false
        type: string
        default: "Running SAST"
      image_message:
        required: false
        type: string
        default: "Building image"
      uat_message:
        required: false
        type: string
        default: "Deploying to UAT"
      prod_message:
        required: false
        type: string
        default: "Deploying to Production"

jobs:
  preparation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Preparation Setup
        run: echo "${{ inputs.prep_message }}"

  parallel-stages:
    needs: preparation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: ['build', 'unit-test', 'packaging', 'sca']
    steps:
      - uses: actions/checkout@v4
      - name: Build
        if: matrix.job == 'build'
        run: echo "${{ inputs.build_message }}"
      - name: Unit Test
        if: matrix.job == 'unit-test'
        run: echo "${{ inputs.test_message }}"
      - name: Packaging
        if: matrix.job == 'packaging'
        run: echo "${{ inputs.package_message }}"
      - name: SCA
        if: matrix.job == 'sca'
        run: echo "${{ inputs.sca_message }}"

  sast:
    needs: parallel-stages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: SAST Analysis
        run: echo "${{ inputs.sast_message }}"

  image-build:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: echo "${{ inputs.image_message }}"

  deploy-uat:
    needs: image-build
    runs-on: ubuntu-latest
    environment:
      name: UAT
    steps:
      - name: Deploy to UAT
        run: echo "${{ inputs.uat_message }}"

  deploy-prod:
    needs: deploy-uat
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Deploy to Production
        run: echo "${{ inputs.prod_message }}"
